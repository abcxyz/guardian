# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Admin'
description: |-
  Use this action to run Terraform commands as the Terraform service account. This action can only be run by respository administrators.

inputs:
  command:
    description: 'COMMAND - The Terraform command to run including any arguments (this value is appended to the terraform command).'
    required: true
  number:
    description: 'PR NUMBER - The Pull Request number to run the actions for (if blank, this runs for the default branch).'
    required: false
  terraform_init:
    description: 'TERRAFORM_INIT - Run the Terraform Init command prior to running the admin command.'
    default: 'true'
  working_directory:
    description: 'The working directory for Guardian to execute commands in.'
    required: false
    default: '.'
  terraform_version:
    description: 'The Terraform version for Guardian to use.'
    required: true
  protect_lockfile:
    description: 'Prevent modification of the Terraform lockfile.'
    required: false
    default: 'true'
  lock_timeout:
    description: 'The duration Terraform should wait to obtain a lock when running commands that modify state.'
    required: false
    default: '10m'

runs:
  using: 'composite'
  steps:
    - name: 'Validate Branch'
      if: ${{ github.ref_name != github.event.repository.default_branch }}
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        DEFAULT_BRANCH: '${{ github.event.repository.default_branch }}'
      run: |-
        echo "::error ::Guardian Admin can only be run from the default branch ($DEFAULT_BRANCH)."
        exit 1

    - name: 'Validate Permission'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        GITHUB_TOKEN: '${{ github.token }}'
      run: |-
        ROLE=$(gh api -H "Accept: application/vnd.github+json" /repos/$GITHUB_REPOSITORY/collaborators/$GITHUB_ACTOR/permission | jq .role_name -r)
        if [ "$ROLE" != "admin" ]; then
          echo "::error ::Actor @$GITHUB_ACTOR does not have admin permission to perform these operations."
          exit 1
        fi

    - name: 'Checkout PR'
      if: ${{ inputs.number != '' }}
      shell: 'bash'
      env:
        GITHUB_TOKEN: '${{ github.token }}'
        NUMBER: '${{ inputs.number }}'
      run: |-
        gh pr checkout $NUMBER

    - name: 'Setup Terraform'
      uses: 'abcxyz/secure-setup-terraform@78e3f2fdfb7ebf59ce42141f6dd93bdd65bf04ed' # ratchet:abcxyz/secure-setup-terraform@v0.2.5
      with:
        terraform_version: '${{ inputs.terraform_version }}'
        terraform_module_location: './${{ inputs.working_directory }}'
        terraform_lockfile_location: './${{ inputs.working_directory }}'
        protect_lockfile: '${{ inputs.protect_lockfile }}'
        terraform_wrapper: false

    - name: 'Terraform Init'
      # only if inputs.terraform_init is a truthy value
      if: ${{ contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.terraform_init) }}
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        TF_IN_AUTOMATION: 'true'
      run: |-
        terraform init -input=false

    - name: 'Run Command'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        TF_IN_AUTOMATION: 'true'
        COMMAND: '${{ inputs.command }}'
      run: |-
        terraform "$COMMAND"
