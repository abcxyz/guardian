# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Plan'
description: |-
  Use this action to run a Terraform Plan process for pull requests.
inputs:
  working_directory:
    description: 'The working directory for Guardian to execute commands in.'
    required: false
    default: '.'
  bucket_name:
    description: 'The Google Cloud Storage bucket name to store Guardian plan files (e.g. my-guardian-state-bucket).'
    required: true
  terraform_version:
    description: 'The Terraform version for Guardian to use.'
    required: true
  protect_lockfile:
    description: 'Prevent modification of the Terraform lockfile.'
    required: false
    default: 'true'
  lock_timeout:
    description: 'The duration Terraform should wait to obtain a lock when running commands that modify state.'
    required: false
    default: '10m'
  max_retries:
    description: 'The maxiumum number of retries when handling failures.'
    required: false
    default: '5'
  max_retry_delay:
    description: 'The max retry delay in seconds when handling failures.'
    required: false
    default: '60'
runs:
  using: 'composite'
  steps:
    - name: 'Bootstrap Out File'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        echo "Unknown error, see logs for details." > $OUT_FILENAME
    - name: 'Start Comment'
      id: 'comment'
      uses: 'actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410' # ratchet:actions/github-script@v6
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const { data: prComment } = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `**\`ðŸ”± Guardian ðŸ”± PLAN\`** - ðŸŸ¨ Running for dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]`,
          });
          return prComment.id;

    - name: 'Setup Terraform'
      uses: 'abcxyz/secure-setup-terraform@eba2f9ad6a23da76d4e5996fe1c2850cc8ca92d9' # ratchet:abcxyz/secure-setup-terraform@main
      with:
        terraform_version: '${{ inputs.terraform_version }}'
        terraform_module_location: './${{ inputs.working_directory }}'
        terraform_lockfile_location: './${{ inputs.working_directory }}'
        protect_lockfile: '${{ inputs.protect_lockfile }}'
        terraform_wrapper: false
    - name: 'Terraform Format'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Format" > $OUT_FILENAME
        terraform fmt -check -diff -recursive 2>&1 | tee -a $OUT_FILENAME
    - name: 'Terraform Init'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Init" > $OUT_FILENAME
        terraform init -input=false -no-color 2>&1 | tee -a $OUT_FILENAME
    - name: 'Terraform Validate'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Validate" > $OUT_FILENAME
        terraform validate -no-color 2>&1 | tee -a $OUT_FILENAME
    - name: 'Terraform Plan'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
        LOCK_TIMEOUT: '${{ inputs.lock_timeout }}'
      run: |-
        echo "# Terraform Plan" > $OUT_FILENAME

        # we want to capture the status code so dont fail after
        set +e +o pipefail

        terraform plan -lock-timeout=$LOCK_TIMEOUT -input=false -no-color -out=tfplan.binary -detailed-exitcode 2>&1 | tee -a $OUT_FILENAME

        PLAN_EXIT_CODE="${PIPESTATUS[0]}"
        echo "PLAN_EXIT_CODE=$PLAN_EXIT_CODE" >> $GITHUB_ENV

        if [ "$PLAN_EXIT_CODE" == "1" ]; then
          exit 1
        fi

        exit 0
    - name: 'Terraform Show'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Show" > $OUT_FILENAME
        terraform show -no-color tfplan.binary 2>&1 | tee -a $OUT_FILENAME
    - name: 'GitHub Format'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        sed -i -E 's|^([[:space:]]*)([~])|\1\!|g' $OUT_FILENAME
        sed -i -E 's|^([[:space:]]*)([-+\!])|\2\1|g' $OUT_FILENAME
    - name: 'Create Success File'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        SUCCESS_FILENAME: 'success_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        cp $OUT_FILENAME ${{ env.SUCCESS_FILENAME }}
    - name: 'Setup Node'
      uses: 'actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8' # ratchet:actions/setup-node@v3
      with:
        node-version: '16'
    - name: 'Install Google Cloud Storage SDK'
      shell: 'bash'
      run: |-
        npm install @google-cloud/storage@~6.9.5
    - name: 'Upload Plan File'
      uses: 'actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410' # ratchet:actions/github-script@v6
      env:
        OUT_FILEPATH: '${{ inputs.working_directory }}/out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        GUARDIAN_PLAN_PREFIX: 'guardian-plans/${{ github.repository }}/${{ github.event.pull_request.number }}/${{ inputs.working_directory }}'
        BUCKET_NAME: '${{ inputs.bucket_name }}'
        WORKING_DIRECTORY: '${{ inputs.working_directory }}'
        MAX_RETRIES: '${{ inputs.max_retries }}'
        MAX_RETRY_DELAY: '${{ inputs.max_retry_delay }}'
      with:
        script: |-
          const fs = require("fs");
          const { EOL } = require("os");

          try {
            const { Storage, IdempotencyStrategy } = require("@google-cloud/storage");
            const bucketName = process.env.BUCKET_NAME;
            const fileName = `${process.env.WORKING_DIRECTORY}/tfplan.binary`;
            const destFileName = `${process.env.GUARDIAN_PLAN_PREFIX}/tfplan.binary`;

            const storage = new Storage({
              retryOptions: {
                autoRetry: true,
                retryDelayMultiplier: 3,
                totalTimeout: 500,
                maxRetryDelay: process.env.MAX_RETRY_DELAY,
                maxRetries: process.env.MAX_RETRIES,
                idempotencyStrategy: IdempotencyStrategy.RetryAlways,
              },
            });

            await storage.bucket(bucketName).upload(fileName, {
              destination: destFileName,
              metadata: {
                metadata: {
                  plan_exit_code: process.env.PLAN_EXIT_CODE,
                },
              },
            });
          } catch (err) {
            const errString = JSON.stringify(err, undefined, 2);
            const errorData = `# Upload Plan File${EOL}Error: ${errString}`;

            fs.writeFileSync(process.env.OUT_FILEPATH, errorData, { encoding: "utf8" });

            core.error("Failed to upload plan file");
            core.error(errString);
            core.setFailed("Failed to upload plan file");
          }
    - name: 'Ensure Outfile'
      if: '${{ failure() }}'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        touch $OUT_FILENAME
    - name: 'Failure Comment'
      if: '${{ failure() }}'
      uses: 'actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410' # ratchet:actions/github-script@v6
      env:
        COMMENT_ID: '${{ steps.comment.outputs.result }}'
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        WORKING_DIRECTORY: '${{ inputs.working_directory }}'
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const fs = require("fs");
          const msg = fs.readFileSync(
            `${process.env.WORKING_DIRECTORY}/${process.env.OUT_FILENAME}`,
            { encoding: "utf8" }
          );

          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: `**\`ðŸ”± Guardian ðŸ”± PLAN\`** - ðŸŸ¥ Failed for dir: \`${process.env.WORKING_DIRECTORY}\` [[logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}/attempts/${process.env.GITHUB_RUN_ATTEMPT})]
          <details>
          <summary>Details</summary>\n
          \`\`\`diff\n
          ${msg}
          \`\`\`
          </details>`,
          });

    - name: 'Success Comment'
      if: '${{ success() }}'
      uses: 'actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410' # ratchet:actions/github-script@v6
      env:
        COMMENT_ID: '${{ steps.comment.outputs.result }}'
        PLAN_EXIT_CODE: '${{ env.PLAN_EXIT_CODE }}'
        SUCCESS_FILENAME: 'success_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        WORKING_DIRECTORY: '${{ inputs.working_directory }}'
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const fs = require("fs");
          const msg = fs.readFileSync(
            `${process.env.WORKING_DIRECTORY}/${process.env.SUCCESS_FILENAME}`,
            { encoding: "utf8" }
          );

          // delete the starting comment when there is no diff
          if (process.env.PLAN_EXIT_CODE === "0") {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env.COMMENT_ID,
            });

            return;
          }

          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: `**\`ðŸ”± Guardian ðŸ”± PLAN\`** - ðŸŸ© Successful for dir: \`${process.env.WORKING_DIRECTORY}\` [[logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}/attempts/${process.env.GITHUB_RUN_ATTEMPT})]

          <details>
          <summary>Diff</summary>\n
          \`\`\`diff\n
          ${msg}
          \`\`\`
          </details>`,
          });
