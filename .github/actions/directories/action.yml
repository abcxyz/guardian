# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Directories'
description: |-
  Use this action to get a list of the Terraform directories to use with Guardian for your repository. Guardian will find and use all directories that contain a Terraform backend as an allowlist.

inputs:
  terraform_directory:
    description: 'A sub-directory for all Terraform files. This value defaults to the root of the repository.'
    required: false
    default: '.'
  directories:
    description: 'A CSV list of directories to run Guardian commands for.'
    required: false
    default: ''
  detect_plan_changes:
    description: 'Use the pull request base and head refs to get all file changes to determine the directories run Guardian Plan commands for.'
    required: false
    default: 'false'
  detect_apply_changes:
    description: 'Use the respository default branch HEAD and HEAD~1 to get all file changes to determine the directories run Guardian Apply commands for.'
    required: false
    default: 'false'

outputs:
  directories:
    description: 'The directories with Terraform changes as configured by the action input.'
    value: ${{ steps.plan_dirs.outputs.dirs || steps.apply_dirs.outputs.dirs || steps.dirs.outputs.dirs }}

runs:
  using: 'composite'
  steps:
    - name: 'Get Directories'
      id: 'dirs'
      shell: 'bash'
      run: |-
        # Get Directories

        TERRAFORM_DIRECTORY="${{ inputs.terraform_directory }}"

        # Get all terraform file directores that contain a backend config
        BACKEND_DIRS=$(find $TERRAFORM_DIRECTORY -name "*.tf" | xargs grep -l 'backend ".*" {' | xargs dirname | sed 's|[\.?][/]*||g' | sort | uniq)
        echo "BACKEND_DIRS=$BACKEND_DIRS"

        INPUT_DIRS="${{ inputs.directories }}"

        if [ "$INPUT_DIRS" != "" ]; then
          # Convert CSV string to newline delimited string for sorting (replace `, ` to `\n`)
          REQUESTED=$(echo "$INPUT_DIRS" | sed 's/,[[:space:]]*/\n/g' | sort | uniq)

          # Get the intersection of directories with backends and requested as an array
          OUTPUT_DIRS=$(comm -12 <(echo "$BACKEND_DIRS") <(echo "$REQUESTED") | jq -nRrc '[inputs|split("\n")] | flatten | tostring')

          echo "dirs=$OUTPUT_DIRS"
          echo "dirs=$OUTPUT_DIRS" >> $GITHUB_OUTPUT
          exit
        fi

        # Default to returning all directories with backends as an array
        OUTPUT_DIRS=$(echo "$BACKEND_DIRS" | jq -nRrc '[inputs|split("\n")] | flatten | tostring')

        echo "dirs=$OUTPUT_DIRS"
        echo "dirs=$OUTPUT_DIRS" >> $GITHUB_OUTPUT

    - name: 'Get Plan Directories'
      if: ${{ inputs.detect_plan_changes == 'true' }}
      id: 'plan_dirs'
      shell: 'bash'
      run: |-
        # Get Plan Directories

        TERRAFORM_DIRECTORY="${{ inputs.terraform_directory }}"

        # Get all terraform file directores that contain a backend config
        BACKEND_DIRS=$(find $TERRAFORM_DIRECTORY -name "*.tf" | xargs grep -l 'backend ".*" {' | xargs dirname | sed 's|[\.?][/]*||g' | sort | uniq)
        echo "BACKEND_DIRS=$BACKEND_DIRS"

        HEAD_REF="origin/${{ github.event.pull_request.head.ref }}"
        BASE_REF="origin/${{ github.event.pull_request.base.ref }}"

        MODIFIED=$(git diff "$BASE_REF..$HEAD_REF" --name-only | xargs dirname | sort | uniq)
        echo "MODIFIED=$MODIFIED"

        # Placeholder for output directories
        OUTPUT_DIRS=""

        # Loop over all modified directories
        for MODIFIED_DIR in $MODIFIED; do
          TEST_DIR=$MODIFIED_DIR

          while true; do
            # Determine if the test dir has a terraform backend config
            TARGET_DIR=$(comm -12 <(echo "$BACKEND_DIRS") <(echo "$TEST_DIR"))

            # If no match, use dirname to get parent
            if [ "$TARGET_DIR" == "" ]; then
              NEW_DIR=$(dirname $TEST_DIR)

              # If dir didnt change, we hit a root, exit
              if [ "$NEW_DIR" == "$TEST_DIR" ]; then
                break
              fi

              # Update dir and try again
              TEST_DIR=$NEW_DIR
              continue
            fi

            # If we havent added any output directories add it, otherwise join space delimited
            if [ "$OUTPUT_DIRS" == "" ]; then
                OUTPUT_DIRS="$TARGET_DIR"
            else
                OUTPUT_DIRS="$OUTPUT_DIRS $TARGET_DIR"
            fi

            break
          done
        done

        # Format output dirs for passing into GitHub matrix
        OUTPUT_DIRS=$(echo "$OUTPUT_DIRS" | tr ' ' '\n' | sort | uniq | jq -nRrc '[inputs|split("\n")] | flatten | tostring')

        echo "dirs=$OUTPUT_DIRS"
        echo "dirs=$OUTPUT_DIRS" >> $GITHUB_OUTPUT

    - name: 'Get Apply Directories'
      if: ${{ inputs.detect_apply_changes == 'true' }}
      id: 'apply_dirs'
      shell: 'bash'
      run: |-
        # Get Apply Directories

        TERRAFORM_DIRECTORY="${{ inputs.terraform_directory }}"

        # Get all terraform file directores that contain a backend config
        BACKEND_DIRS=$(find $TERRAFORM_DIRECTORY -name "*.tf" | xargs grep -l 'backend ".*" {' | xargs dirname | sed 's|[\.?][/]*||g' | sort | uniq)
        echo "BACKEND_DIRS=$BACKEND_DIRS"

        MODIFIED=$(git diff HEAD~1 --name-only | xargs dirname | sort | uniq)
        echo "MODIFIED=$MODIFIED"

        # Placeholder for output directories
        OUTPUT_DIRS=""

        # Loop over all modified directories
        for MODIFIED_DIR in $MODIFIED; do
          TEST_DIR=$MODIFIED_DIR

          while true; do
            # Determine if the test dir has a terraform backend config
            TARGET_DIR=$(comm -12 <(echo "$BACKEND_DIRS") <(echo "$TEST_DIR"))

            # If no match, use dirname to get parent
            if [ "$TARGET_DIR" == "" ]; then
              NEW_DIR=$(dirname $TEST_DIR)

              # If dir didnt change, we hit a root, exit
              if [ "$NEW_DIR" == "$TEST_DIR" ]; then
                break
              fi

              # Update dir and try again
              TEST_DIR=$NEW_DIR
              continue
            fi

            # If we havent added any output directories add it, otherwise join space delimited
            if [ "$OUTPUT_DIRS" == "" ]; then
                OUTPUT_DIRS="$TARGET_DIR"
            else
                OUTPUT_DIRS="$OUTPUT_DIRS $TARGET_DIR"
            fi

            break
          done
        done

        # Format output dirs for passing into GitHub matrix
        OUTPUT_DIRS=$(echo "$OUTPUT_DIRS" | tr ' ' '\n' | sort | uniq | jq -nRrc '[inputs|split("\n")] | flatten | tostring')

        echo "dirs=$OUTPUT_DIRS"
        echo "dirs=$OUTPUT_DIRS" >> $GITHUB_OUTPUT
