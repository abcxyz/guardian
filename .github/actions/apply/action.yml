# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Apply'
description: |-
  Use this action to run a Terraform Apply process for merged pull requests.

inputs:
  working_directory:
    description: 'The working directory for Guardian to execute commands in.'
    required: false
    default: '.'
  bucket_name:
    description: 'The Google Cloud Storage bucket name to retrieve Guardian plan files (e.g. my-guardian-state-bucket).'
    required: true
  terraform_version:
    description: 'The Terraform version for Guardian to use.'
    required: true
  protect_lockfile:
    description: 'Enable lockfile protection to prevent modification of the Terraform lockfile.'
    required: false
    default: 'true'
  lock_timeout:
    description: 'The duration Terraform should wait to obtain a lock when running commands that modify state.'
    required: false
    default: '10m'
  max_retries:
    description: 'The maxiumum number of retries when handling failures.'
    required: false
    default: '5'
  base_retry_delay:
    description: 'The base retry delay in seconds when handling failures.'
    required: false
    default: '2'
  max_retry_delay:
    description: 'The max retry delay in seconds when handling failures.'
    required: false
    default: '60'

runs:
  using: composite
  steps:
    - name: 'Bootstrap Out File'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        echo "Unknown error, see logs for details." > "${{ env.OUT_FILENAME }}"

    - name: 'Validate Event'
      if: ${{ github.event_name != 'push' }}
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        MSG="Configuration error, Guardian Apply can only be run for 'push' events."
        echo "$MSG" > "${{ env.OUT_FILENAME }}"
        echo "::error ::$MSG"
        exit 1

    - name: 'Get PR Number'
      id: 'get-pr'
      uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # ratchet:actions/github-script@v6
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const { data: pullRequests } =
            await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}',
            });

          const pullRequest = pullRequests.find((pr) => pr.state === "closed");
          if (!pullRequest) {
            setFailed("Failed to get pull request for merged SHA: ${{ github.sha }}");
            process.exit(1);
          }

          return pullRequest.number;

    - name: 'Start Comment'
      id: 'comment'
      uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # ratchet:actions/github-script@v6
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const { data: prComment } = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: '${{ steps.get-pr.outputs.result }}',
            body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ¨ Running Apply in dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]`,
          });
          return prComment.id;

    - name: 'Setup Terraform'
      uses: abcxyz/secure-setup-terraform@78e3f2fdfb7ebf59ce42141f6dd93bdd65bf04ed # ratchet:abcxyz/secure-setup-terraform@v0.2.5
      with:
        terraform_version: '${{ inputs.terraform_version }}'
        terraform_module_location: './${{ inputs.working_directory }}'
        terraform_lockfile_location: './${{ inputs.working_directory }}'
        protect_lockfile: '${{ inputs.protect_lockfile }}'
        terraform_wrapper: false

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587' # ratchet:google-github-actions/setup-gcloud@v1

    - name: 'Cloud SDK Config'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        echo "# Cloud SDK Config" > ${{ env.OUT_FILENAME }}
        gcloud config set storage/max_retries ${{ inputs.max_retries }} 2>&1 | tee -a ${{ env.OUT_FILENAME }}
        gcloud config set storage/base_retry_delay ${{ inputs.base_retry_delay }} 2>&1 | tee -a ${{ env.OUT_FILENAME }}
        gcloud config set storage/max_retry_delay ${{ inputs.max_retry_delay }} 2>&1 | tee -a ${{ env.OUT_FILENAME }}

    - name: 'Terraform Init'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Init" > ${{ env.OUT_FILENAME }}
        terraform init -input=false -no-color 2>&1 | tee -a ${{ env.OUT_FILENAME }}

    - name: 'Download Plan File'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        GUARDIAN_PLAN_PREFIX: 'guardian-plans/${{ github.repository }}/${{ steps.get-pr.outputs.result }}/${{ inputs.working_directory }}'
      run: |-
        echo "# Download Plan File" > ${{ env.OUT_FILENAME }}
        gcloud storage cp \
          gs://${{ inputs.bucket_name }}/${{ env.GUARDIAN_PLAN_PREFIX }}/tfplan.binary \
          tfplan.binary \
          2>&1 | tee -a ${{ env.OUT_FILENAME }}

    - name: 'Terraform Apply'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        TF_IN_AUTOMATION: 'true' # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
      run: |-
        echo "# Terraform Apply" > ${{ env.OUT_FILENAME }}
        terraform apply -lock-timeout=${{ inputs.lock_timeout }} -input=false -no-color tfplan.binary 2>&1 | tee -a ${{ env.OUT_FILENAME }}

    - name: 'GitHub Format'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        sed -i -E 's|^([[:space:]]*)([~])|\1\!|g' ${{ env.OUT_FILENAME }}
        sed -i -E 's|^([[:space:]]*)([-+\!])|\2\1|g' ${{ env.OUT_FILENAME }}

    - name: 'Create Success File'
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        SUCCESS_FILENAME: 'success_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        cp ${{ env.OUT_FILENAME }} ${{ env.SUCCESS_FILENAME }}

    - name: 'Delete Plan File'
      if: ${{ always() }}
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
        GUARDIAN_PLAN_PREFIX: 'guardian-plans/${{ github.repository }}/${{ steps.get-pr.outputs.result }}/${{ inputs.working_directory }}'
      run: |-
        echo "# Delete Plan File" > ${{ env.OUT_FILENAME }}
        gcloud storage rm --all-versions gs://${{ inputs.bucket_name }}/${{ env.GUARDIAN_PLAN_PREFIX }}/tfplan.binary 2>&1 | tee -a ${{ env.OUT_FILENAME }}

    - name: 'Ensure Outfile'
      if: ${{ failure() }}
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      run: |-
        touch ${{ env.OUT_FILENAME }}

    - name: 'Failure Comment'
      if: ${{ failure() }}
      uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # ratchet:actions/github-script@v6
      env:
        OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const fs = require('fs')
          const msg = fs.readFileSync('${{ inputs.working_directory }}/${{ env.OUT_FILENAME }}', { encoding: 'utf8' });

          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: '${{ steps.comment.outputs.result }}',
            body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ¥ Failed to run Apply in dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]\n
          <details>
          <summary>Details</summary>\n
          \`\`\`diff\n
          ${msg}
          \`\`\`
          </details>`,
          });

    - name: 'Success Comment'
      if: ${{ success() }}
      uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # ratchet:actions/github-script@v6
      env:
        SUCCESS_FILENAME: 'success_${{ github.run_id }}_${{ github.run_attempt }}.txt'
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const fs = require('fs')
          const msg = fs.readFileSync('${{ inputs.working_directory }}/${{ env.SUCCESS_FILENAME }}', { encoding: 'utf8' })

          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: '${{ steps.comment.outputs.result }}',
            body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ© Ran Apply in dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]\n
          <details>
          <summary>Details</summary>\n
          \`\`\`diff\n
          ${msg}
          \`\`\`
          </details>`,
          });
