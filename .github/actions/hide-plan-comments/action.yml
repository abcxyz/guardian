# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Hide Previous Plan Comments'
description: |-
  Use this action to hide Guardian Plan comments from previous runs.

runs:
  using: 'composite'
  steps:
    - name: 'Hide Previous Plan Comments'
      uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
      with:
        github-token: '${{ github.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          const commentsQuery = `query paginate($cursor: String, $owner: String!, $repo: String!, $number: Int!) {
            repository(owner: $owner, name: $repo) {
              pullRequest(number: $number) {
                comments(first: 100, after: $cursor) {
                  nodes {
                    id
                    author {
                      login
                    }
                    body
                    bodyText
                    isMinimized
                  }
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                }
              }
            }
          }`;

          let hasNextPage = false;
          const commentQueryOpts = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            number: context.issue.number,
          };

          const allComments = [];

          do {
            const commentsResponse = await github.graphql(commentsQuery, commentQueryOpts);
            allComments.push(...commentsResponse.repository.pullRequest.comments.nodes)
            hasNextPage = commentsResponse.repository.pullRequest.comments.pageInfo.hasNextPage;
            commentQueryOpts.cursor = commentsResponse.repository.pullRequest.comments.pageInfo.endCursor;
          } while (hasNextPage);

          await Promise.all(
            allComments
              .filter(
                (comment) =>
                  comment.author.login == "github-actions" &&
                  comment.bodyText.match(/^ðŸ”± Guardian ðŸ”±(.*)PLAN/g) &&
                  !comment.isMinimized
              )
              .map(async (comment) => {
                const minimizeCommentQuery = `mutation minimizeComment($id: ID!) {
                  minimizeComment(input: { classifier: OUTDATED, subjectId: $id }) {
                    clientMutationId
                  }
                }`;

                await github.graphql(minimizeCommentQuery, { id: comment.id });
              })
          );
