# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'release'

on:
  push:
    branches:
      - 'main'
      - 'release/**/*'

concurrency:
  group: '${{ github.workflow }}-${{ github.event_name}}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: false

jobs:
  create-release:
    if: |-
      ${{ startsWith(github.event.head_commit.message, 'Release: v') }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    outputs:
      created: '${{ steps.create-release.outputs.created || false }}'
      tag: '${{ steps.create-release.outputs.tag }}'
      version: '${{ steps.create-release.outputs.version }}'
    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193' # ratchet:google-github-actions/auth@v2
        with:
          create_credentials_file: false
          export_environment_variables: false
          workload_identity_provider: '${{ vars.TOKEN_MINTER_WIF_PROVIDER }}'
          service_account: '${{ vars.TOKEN_MINTER_WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: '${{ vars.TOKEN_MINTER_SERVICE_AUDIENCE }}'
          id_token_include_email: true

      - name: 'Mint Token'
        id: 'mint-token'
        uses: 'abcxyz/github-token-minter/.github/actions/minty@main' # ratchet:exclude
        with:
          id_token: '${{ steps.auth.outputs.id_token }}'
          service_url: '${{ vars.TOKEN_MINTER_SERVICE_URL }}'
          requested_permissions: |-
            {
              "scope": "release",
              "repositories": ["${{ github.event.repository.name }}"],
              "permissions": {
                "contents": "write"
              }
            }

      - uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # ratchet:actions/github-script@v7
        id: 'create-release'
        env:
          EXPECTED_EMAIL: '${{ vars.TOKEN_MINTER_GITHUB_EMAIL }}'
        with:
          github-token: '${{ steps.mint-token.outputs.token }}'
          script: |-
            // Get the head commit from the API instead of the event, because
            // signature status is not available in the webhook.
            const headCommit = context.payload.head_commit;

            // Ensure the commit is signed.
            const commitResult = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headCommit.id,
            })

            // Ensure the commit is a release commit.
            const commitMessage = commitResult.data.commit.message;
            const matches = commitMessage.match(/Release: v(?<version>[^\s]+)/i);
            if (!matches || !matches.groups) {
              core.setFailed(`❌ Commit "${commitMessage}" does not match version syntax`);
              return;
            }
            let version = matches.groups.version;
            while(version.charAt(0).toLowerCase() === 'v') {
              version = version.substr(1);
            }
            core.info(`👾 Computed version as: "${version}"`)
            core.setOutput('version', version)

            // Set the tag (which has the leading "v") prefix.
            const tag = `v${version}`;
            core.info(`👾 Computed tag as: "${tag}"`)
            core.setOutput('tag', tag)

            // Verify the commit is signed.
            if (!commitResult.data.commit.verification.verified) {
              core.setFailed(`❌ Commit is not signed`)
              return;
            }

            // Verify the email matches the expected committer.
            const expectedEmail = process.env.EXPECTED_EMAIL;
            const gotEmail = commitResult.data.commit.author.email;
            if (gotEmail !== expectedEmail) {
              core.setFailed(`❌ Commit author is "${gotEmail}", expected "${expectedEmail}"`);
              return;
            }

            // Compute prerelase.
            const prerelease = ['-', 'pre', 'alpha', 'beta', 'preview'].some((v) => version.includes(v));

            // Create the release.
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              target_commitish: headCommit.id,
              name: tag,
              generate_release_notes: true,
              prerelease: prerelease,
              draft: true,
              make_latest: 'legacy',
            });
            core.setOutput('created', true);
            core.info(`✅ Created release "${response.data.name}" at ${response.data.html_url}`);

  build:
    uses: './.github/workflows/build.yml'
    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - 'create-release'
    with:
      version: '${{ needs.create-release.outputs.version }}'

  publish-binaries:
    runs-on: 'ubuntu-latest'
    needs:
      - 'build'
      - 'create-release'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193' # ratchet:google-github-actions/auth@v2
        with:
          create_credentials_file: false
          export_environment_variables: false
          workload_identity_provider: '${{ vars.TOKEN_MINTER_WIF_PROVIDER }}'
          service_account: '${{ vars.TOKEN_MINTER_WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: '${{ vars.TOKEN_MINTER_SERVICE_AUDIENCE }}'
          id_token_include_email: true

      - name: 'Mint Token'
        id: 'mint-token'
        uses: 'abcxyz/github-token-minter/.github/actions/minty@main' # ratchet:exclude
        with:
          id_token: '${{ steps.auth.outputs.id_token }}'
          service_url: '${{ vars.TOKEN_MINTER_SERVICE_URL }}'
          requested_permissions: |-
            {
              "scope": "release",
              "repositories": ["${{ github.event.repository.name }}"],
              "permissions": {
                "contents": "write"
              }
            }

      - uses: 'actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093' # ratchet:actions/download-artifact@v4
        with:
          pattern: '*'
          path: 'dist/'
          merge-multiple: true

      - name: 'Compress and compute checksums'
        run: |-
          cd dist/

          while IFS= read -r -d '' BINARY; do
            chmod +x "${BINARY}"

            FOLDER="$(basename "${BINARY}" ".exe")"
            NAME="${BINARY%%_*}"

            # Windows - zip and follow Windows conventions with named subdirectory
            if [ "${FOLDER}" != "${BINARY}" ]; then
              NAME="${NAME}.exe"
              mv "${BINARY}" "${BINARY}.tmp"
              mkdir "${FOLDER}"
              mv "${BINARY}.tmp" "${FOLDER}/${NAME}"

              (zip -9 -o -m -r -q "${FOLDER}.zip" "${FOLDER}" && rm -rf "${FOLDER}") &

            # Mac/Linux - tar and gZip the binary directly for non-windows style conventions
            else
              mv "${BINARY}" "${NAME}"
              (tar -czvf "${FOLDER}.tar.gz" "${NAME}" && rm -rf "${NAME}") &
            fi
          done <   <(find . -type f -printf '%P\0')
          wait

          find . \( -name '*.tar.gz' -o -name '*.zip' \) -type f -printf '%P\0' | xargs -0 sha256sum > SHA256SUMS
          find . \( -name '*.tar.gz' -o -name '*.zip' \) -type f -printf '%P\0' | xargs -0 sha512sum > SHA512SUMS

      - name: 'Upload binaries'
        env:
          GH_TOKEN: '${{ steps.mint-token.outputs.token }}'
          RELEASE_VERSION: 'v${{ needs.create-release.outputs.version }}'
          REPO: '${{ github.repository }}'
        run: |-
          mapfile -t FILES < <(find ./dist -type f)
          gh release upload "${RELEASE_VERSION}" "${FILES[@]}" \
            --repo "${REPO}"

  publish-release:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - 'create-release'
      - 'publish-binaries'
    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193' # ratchet:google-github-actions/auth@v2
        with:
          create_credentials_file: false
          export_environment_variables: false
          workload_identity_provider: '${{ vars.TOKEN_MINTER_WIF_PROVIDER }}'
          service_account: '${{ vars.TOKEN_MINTER_WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: '${{ vars.TOKEN_MINTER_SERVICE_AUDIENCE }}'
          id_token_include_email: true

      - name: 'Mint Token'
        id: 'mint-token'
        uses: 'abcxyz/github-token-minter/.github/actions/minty@main' # ratchet:exclude
        with:
          id_token: '${{ steps.auth.outputs.id_token }}'
          service_url: '${{ vars.TOKEN_MINTER_SERVICE_URL }}'
          requested_permissions: |-
            {
              "scope": "release",
              "repositories": ["${{ github.event.repository.name }}"],
              "permissions": {
                "contents": "write"
              }
            }

      - name: 'Publish release'
        env:
          GH_TOKEN: '${{ steps.mint-token.outputs.token }}'
          RELEASE_VERSION: 'v${{ needs.create-release.outputs.version }}'
          REPO: '${{ github.repository }}'
        run: |-
          gh release edit "${RELEASE_VERSION}" \
            --repo "${REPO}" \
            --draft=false

  cleanup-failed-release:
    if: |-
      ${{ always() && needs.create-release.outputs.created == 'true' && contains(fromJSON('["failure", "cancelled", "skipped"]'), needs.publish-release.result) }}
    runs-on: 'ubuntu-latest'
    needs:
      - 'create-release'
      - 'publish-release'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193' # ratchet:google-github-actions/auth@v2
        with:
          create_credentials_file: false
          export_environment_variables: false
          workload_identity_provider: '${{ vars.TOKEN_MINTER_WIF_PROVIDER }}'
          service_account: '${{ vars.TOKEN_MINTER_WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: '${{ vars.TOKEN_MINTER_SERVICE_AUDIENCE }}'
          id_token_include_email: true

      - name: 'Mint Token'
        id: 'mint-token'
        uses: 'abcxyz/github-token-minter/.github/actions/minty@main' # ratchet:exclude
        with:
          id_token: '${{ steps.auth.outputs.id_token }}'
          service_url: '${{ vars.TOKEN_MINTER_SERVICE_URL }}'
          requested_permissions: |-
            {
              "scope": "release",
              "repositories": ["${{ github.event.repository.name }}"],
              "permissions": {
                "contents": "write"
              }
            }

      - name: 'Cleanup failed release'
        env:
          GH_TOKEN: '${{ steps.mint-token.outputs.token }}'
          RELEASE_VERSION: 'v${{ needs.create-release.outputs.version }}'
          REPO: '${{ github.repository }}'
        run: |-
          gh release delete "${RELEASE_VERSION}" \
            --repo "${REPO}" \
            --cleanup-tag \
            --yes || true
