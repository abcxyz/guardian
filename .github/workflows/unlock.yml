name: 'Guardian Unlock'

on:
  workflow_call:
    inputs:
      wif_provider:
        required: true
        type: string
      wif_service_account:
        required: true
        type: string
      max_retries:
        required: false
        default: 5
        type: number
      base_retry_delay:
        required: false
        default: 2
        type: number
      max_retry_delay:
        required: false
        default: 60
        type: number
      guardian_bucket_name:
        required: true
        type: string
      guardian_terraform_version:
        required: false
        default: '1.1.8'
        type: string
      guardian_plan_job_name:
        type: string
        default: 'plan'

# only one workflow can run to allow for terraform state locking
concurrency:
  group: '${{ github.workflow_ref }}'

env:
  MAX_RETRIES: ${{ inputs.max_retries }}
  BASE_RETRY_DELAY: ${{ inputs.base_retry_delay }}
  MAX_RETRY_DELAY: ${{ inputs.max_retry_delay }}
  WIF_PROVIDER: ${{ inputs.wif_provider }}
  WIF_SERVICE_ACCOUNT: ${{ inputs.wif_service_account }}
  GUARDIAN_BUCKET_NAME: ${{ inputs.guardian_bucket_name }}
  GUARDIAN_TERRAFORM_VERSION: ${{ inputs.guardian_terraform_version }}
  GUARDIAN_LOCK_FILENAME: 'guardian-locks/${{ github.repository }}/${{ github.repository_id }}.tflock'

jobs:
  unlock_access:
    if: ${{ github.event.issue.pull_request && github.event.comment.body == 'unlock' }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Permission'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          ROLE=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/collaborators/${{ github.triggering_actor }}/permission | jq .role_name -r)
          if [[ "$ROLE" != "admin"  && "$ROLE" != "maintain" ]]; then
            echo "::error ::Actor @${{ github.triggering_actor }} does not have maintain or higher permissions to perform these operations."
            exit 1
          fi

  unlock:
    needs:
      - 'unlock_access'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'
      checks: 'write'
    steps:
      - id: 'comment'
        name: 'Start Comment'
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ env.MAX_RETRIES }}
          script: |-
            const { data: prComment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ¨ Unlocking...`,
            });

            return prComment.id;

      - name: 'Checkout'
        uses: 'actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c' # ratchet:actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587' # ratchet:google-github-actions/setup-gcloud@v1
        with:
          skip_install: true

      - name: 'Cloud SDK Config'
        run: |-
          gcloud config set storage/max_retries ${{ env.MAX_RETRIES }}
          gcloud config set storage/base_retry_delay ${{ env.BASE_RETRY_DELAY }}
          gcloud config set storage/max_retry_delay ${{ env.MAX_RETRY_DELAY }}

      - name: 'Validate'
        run: |-
          NAME="${{ github.event.issue.number }}"

          RESPONSE=$(gcloud storage objects list gs://${{ env.GUARDIAN_BUCKET_NAME }}/${{ env.GUARDIAN_LOCK_FILENAME }} --format="json(name,metadata)")

          LENGTH=$(echo -n ${RESPONSE} | jq -r '. | length')

          # if no lock file, process should exit
          if [ "$LENGTH" = "0" ]; then
              MSG="There is no lock file for this repository."
              echo "error=${MSG}" >> $GITHUB_OUTPUT
              exit 1
          fi

          LOCK_ID=$(echo -n ${RESPONSE} | jq -r '.[0].metadata.lock_id')
          LOCK_REPO_URL=$(echo -n ${RESPONSE} | jq -r '.[0].metadata.lock_repo_url')

          if [ "$LOCK_ID" != "$NAME" ]; then
              MSG="Plan is locked by another process: ${LOCK_REPO_URL}."
              echo "error=${MSG}" >> $GITHUB_OUTPUT
              exit 1  
          fi

      - name: 'Update Checks'
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ env.MAX_RETRIES }}
          script: |-
            const { data: prDetails } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            if (prDetails.merged) {
              process.exit(0);
            }

            const checkNamePrefix = "${{ inputs.guardian_plan_job_name }} / ";
            const { data: completedCheckRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: prDetails.head.ref,
              status: "completed",
              app_id: 15368,
            });

            const planCheckRuns = completedCheckRuns.check_runs.filter(
              (r) =>
                r.app.id === 15368 &&
                r.app.slug === "github-actions" &&
                r.app.owner.login === "github" &&
                r.status === "completed" &&
                r.conclusion === "success" &&
                r.name.startsWith(checkNamePrefix)
            );

            if (planCheckRuns.length === 0) {
              core.setFailed(
                `"${checkNamePrefix}"* check runs not found. Did you name your plan job correctly?`
              );
              process.exit(1);
            }

            await Promise.all(
              planCheckRuns.map(async (r) => {
                await github.rest.checks.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: r.id,
                  conclusion: "failure",
                  completed_at: new Date(),
                  output: {
                    title: "Unlocked, plan must be re-run.",
                    summary: "Unlocked, plan must be re-run.",
                  },
                });
              })
            );

      - name: 'Unlock'
        run: |-
          gcloud storage rm gs://${{ env.GUARDIAN_BUCKET_NAME }}/${{ env.GUARDIAN_LOCK_FILENAME }}

      - name: 'Failure Comment'
        if: ${{ failure() }}
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ env.MAX_RETRIES }}
          script: |-
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: "${{ steps.comment.outputs.result }}",
              body: `#### `**ðŸ”± Guardian ðŸ”±`** - ðŸŸ¥ Unlock failed [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]`,
            `,
            });

      - name: 'Success Comment'
        if: ${{ success() }}
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ env.MAX_RETRIES }}
          script: |-
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: "${{ steps.comment.outputs.result }}",
              body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ© Forced unlock by @${{github.triggering_actor}} [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]`,
            });
