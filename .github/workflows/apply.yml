# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Apply'

on:
  workflow_call:
    inputs:
      working_directory:
        type: string
      wif_provider:
        required: true
        type: string
      wif_service_account:
        required: true
        type: string
      guardian_bucket_name:
        required: true
        type: string
      guardian_terraform_version:
        required: true
        type: string
      max_retries:
        required: false
        default: 5
        type: number
      base_retry_delay:
        required: false
        default: 2
        type: number
      max_retry_delay:
        required: false
        default: 60
        type: number
    secrets:
      workflow_github_token:
        required: false

env:
  GUARDIAN_BUCKET_NAME: ${{ inputs.guardian_bucket_name }}
  GUARDIAN_TERRAFORM_VERSION: ${{ inputs.guardian_terraform_version }}
  GUARDIAN_LOCK_PREFIX: 'guardian-locks/${{ github.repository }}'
  GUARDIAN_LOCK_FILENAME: '${{ github.repository_id }}.tflock'
  GUARDIAN_PLAN_PREFIX: 'guardian-plans/${{ github.repository }}/${{ github.event.pull_request.number }}/${{ inputs.working_directory }}'
  GUARDIAN_PLAN_FILENAME: '.tfplan.binary'
  GITHUB_TOKEN: ${{ secrets.workflow_github_token || github.token }}
  OUT_FILENAME: 'out_${{ github.run_id }}_${{ github.run_attempt }}.txt'
  TF_IN_AUTOMATION: true # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation

jobs:
  apply:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged }}
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c' # ratchet:actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ inputs.wif_provider }}'
          service_account: '${{ inputs.wif_service_account }}'

      - name: 'Setup Terraform'
        uses: abcxyz/secure-setup-terraform@78e3f2fdfb7ebf59ce42141f6dd93bdd65bf04ed # ratchet:abcxyz/secure-setup-terraform@v0.2.5
        with:
          terraform_version: '${{ env.GUARDIAN_TERRAFORM_VERSION }}'
          terraform_module_location: './${{ inputs.working_directory }}'
          protect_lockfile: false
          terraform_wrapper: false

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587' # ratchet:google-github-actions/setup-gcloud@v1

      - name: 'Cloud SDK Config'
        run: |-
          gcloud config set storage/max_retries ${{ inputs.max_retries }}
          gcloud config set storage/base_retry_delay ${{ inputs.base_retry_delay }}
          gcloud config set storage/max_retry_delay ${{ inputs.max_retry_delay }}

      - name: 'Init'
        run: |-
          terraform init -input=false -no-color 2>&1 | tee ${{ env.OUT_FILENAME }}

      - name: 'Download Plan'
        run: |-
          gcloud storage cp \
            gs://${{ env.GUARDIAN_BUCKET_NAME }}/${{ env.GUARDIAN_PLAN_PREFIX }}/${{ env.GUARDIAN_PLAN_FILENAME }} \
            ${{ env.GUARDIAN_PLAN_FILENAME }} \
            2>&1 | tee ${{ env.OUT_FILENAME }}

      - name: 'Apply'
        run: |-
          terraform apply -lock-timeout=10m -input=false -no-color ${{ env.GUARDIAN_PLAN_FILENAME }} 2>&1 | tee ${{ env.OUT_FILENAME }}

      - name: 'GitHub Format'
        run: |-
          sed -i -E 's|^([[:space:]]*)([~])|\1\!|g' ${{ env.OUT_FILENAME }}
          sed -i -E 's|^([[:space:]]*)([-+\!])|\2\1|g' ${{ env.OUT_FILENAME }}

      - name: 'Set Success Env'
        run: |-
          # ensure outfile exists
          touch ${{ env.OUT_FILENAME }}

          SUCCESS=$(cat ${{ env.OUT_FILENAME }})
          echo "SUCCESS<<EOF" >> $GITHUB_ENV
          echo "$SUCCESS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 'Delete Plan'
        run: |-
          gcloud storage rm --all-versions gs://${{ env.GUARDIAN_BUCKET_NAME }}/${{ env.GUARDIAN_PLAN_PREFIX }}/${{ env.GUARDIAN_PLAN_FILENAME }} 2>&1 | tee ${{ env.OUT_FILENAME }}

      - name: 'Set Out Env'
        if: ${{ failure() }}
        run: |-
          # ensure outfile exists
          touch ${{ env.OUT_FILENAME }}

          OUT=$(cat ${{ env.OUT_FILENAME }})
          echo "OUT<<EOF" >> $GITHUB_ENV
          echo "$OUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 'Failure Comment'
        if: ${{ failure() }}
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ inputs.max_retries }}
          script: |-
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: '${{ github.event.pull_request.number }}',
              body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ¥ Failed to run Apply in dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]

              <details>
              <summary>Details</summary>\n
              \`\`\`diff\n
              ${{env.OUT}}
              \`\`\`
              </details>
              `,
            });

      - name: 'Success Comment'
        if: ${{ success() }}
        uses: actions/github-script@d556feaca394842dc55e4734bf3bb9f685482fa0 # ratchet:actions/github-script@v6
        with:
          retries: ${{ inputs.max_retries }}
          script: |-
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: '${{ github.event.pull_request.number }}',
              body: `**\`ðŸ”± Guardian ðŸ”±\`** - ðŸŸ© Ran Apply in dir: \`${{inputs.working_directory}}\` [[logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})]

              <details>
              <summary>Details</summary>\n
              \`\`\`diff\n
              ${{env.SUCCESS}}
              \`\`\`
              </details>
              `,
            });
