# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Guardian Admin'

on:
  workflow_call:
    inputs:
      command:
        description: 'COMMAND - The Terraform command to run including any arguments (this value is appended to the terraform command).'
        required: true
        type: string
      directories:
        description: 'DIRECTORIES - The Terraform directories to execute the command in. If left blank, the command will run for all directories in .guardian'
        type: string
      number:
        description: 'PR NUMBER - The Pull Request number to run the actions for (if blank, this runs for the default branch).'
        type: string
      wif_provider:
        required: true
        type: string
      wif_service_account:
        required: true
        type: string
      max_retries:
        required: false
        default: 5
        type: number
      base_retry_delay:
        required: false
        default: 2
        type: number
      max_retry_delay:
        required: false
        default: 60
        type: number
      guardian_bucket_name:
        required: true
        type: string
      guardian_terraform_version:
        required: false
        default: '1.1.8'
        type: string
    secrets:
      gh_token:
        required: false

# only one workflow can run to allow for terraform state locking
concurrency:
  group: '${{ github.workflow_ref }}'

env:
  MAX_RETRIES: ${{ inputs.max_retries }}
  BASE_RETRY_DELAY: ${{ inputs.base_retry_delay }}
  MAX_RETRY_DELAY: ${{ inputs.max_retry_delay }}
  WIF_PROVIDER: ${{ inputs.wif_provider }}
  WIF_SERVICE_ACCOUNT: ${{ inputs.wif_service_account }}
  GUARDIAN_BUCKET_NAME: ${{ inputs.guardian_bucket_name }}
  GUARDIAN_TERRAFORM_VERSION: ${{ inputs.guardian_terraform_version }}
  TF_IN_AUTOMATION: true # tell terraform this is an automated workflow https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation

jobs:
  admin_access:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Validate Branch'
        if: ${{ github.ref_name != github.event.repository.default_branch }}
        run: |-
          echo "::error ::Guardian Admin can only be run from the default branch (${{ github.event.repository.default_branch }})."
          exit 1

      - name: 'Permission'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          ROLE=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/collaborators/${{ github.triggering_actor }}/permission | jq .role_name -r)
          if [ "$ROLE" != "admin" ]; then
            echo "::error ::Actor @${{ github.triggering_actor }} does not have admin permission to perform these operations."
            exit 1
          fi

  admin_init:
    needs:
      - 'admin_access'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      pull-requests: 'read'
    outputs:
      dirs: ${{ steps.set-matrix.outputs.dirs }}
    steps:
      - name: 'Validate Branch'
        if: ${{ github.ref_name != github.event.repository.default_branch }}
        run: |-
          echo "::error ::Guardian Admin can only be run from the default branch (${{ github.event.repository.default_branch }})."
          exit 1

      - name: 'Checkout'
        uses: 'actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c' # ratchet:actions/checkout@v3

      - name: 'Checkout PR'
        if: ${{ inputs.number != '' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          gh pr checkout ${{ inputs.number }}

      - name: 'Set Matrix'
        id: 'set-matrix'
        run: |-
          if [ "${{ inputs.directories }}" != "" ]; then
            DIRS=$(echo "${{ inputs.directories }}" | jq -Rr 'split(",") | tostring')
            echo "dirs=${DIRS}" >> $GITHUB_OUTPUT
          else
            DIRS=$(touch .guardian | cat .guardian | jq -nRrc '[inputs|split("\n")] | flatten | tostring' )
            echo "dirs=${DIRS}" >> $GITHUB_OUTPUT
          fi

  admin:
    needs:
      - 'admin_access'
      - 'admin_init'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'read'
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJSON(needs.admin_init.outputs.dirs) }}
    env:
      GUARDIAN_WORKING_DIRECTORY: '${{ matrix.dir }}'
      GITHUB_TOKEN: ${{ secrets.gh_token || github.token }}
    steps:
      - name: 'Validate Branch'
        if: ${{ github.ref_name != github.event.repository.default_branch }}
        run: |-
          echo "::error ::Guardian Admin can only be run from the default branch (${{ github.event.repository.default_branch }})."
          exit 1

      - name: 'Checkout'
        uses: 'actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c' # ratchet:actions/checkout@v3

      - name: 'Checkout PR'
        if: ${{ inputs.number != '' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          gh pr checkout ${{ inputs.number }}

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d' # ratchet:google-github-actions/auth@v1
        with:
          workload_identity_provider: '${{ env.WIF_PROVIDER }}'
          service_account: '${{ env.WIF_SERVICE_ACCOUNT }}'
          token_format: 'access_token'

      - name: 'Setup Terraform'
        uses: abcxyz/secure-setup-terraform@78e3f2fdfb7ebf59ce42141f6dd93bdd65bf04ed # ratchet:abcxyz/secure-setup-terraform@v0.2.5
        with:
          terraform_version: '${{ env.GUARDIAN_TERRAFORM_VERSION }}'
          terraform_module_location: './${{ env.GUARDIAN_WORKING_DIRECTORY }}'
          protect_lockfile: false
          terraform_wrapper: false

      - name: 'Init'
        working-directory: '${{ env.GUARDIAN_WORKING_DIRECTORY }}'
        run: |-
          terraform init -input=false

      - name: 'Run Command'
        working-directory: '${{ env.GUARDIAN_WORKING_DIRECTORY }}'
        run: |-
          terraform ${{ inputs.command }}
