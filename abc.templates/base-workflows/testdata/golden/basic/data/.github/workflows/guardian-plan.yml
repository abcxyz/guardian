# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Guardian plan is used to run the Terraform plan commands for a set of
# directories after a pull request has been created.
name: 'guardian_plan'
run-name: 'guardian_plan - [PR #${{ github.event.pull_request.number }}]'

on:
  pull_request_target:
    types:
      - 'opened'
      - 'synchronize'
      - 'reopened'
      - 'ready_for_review'
    branches:
      - 'main'
  # Only used if you are using the merge group for the guardian merge check.
  # https://github.com/abcxyz/guardian?tab=readme-ov-file#merge-check
  merge_group:

# only one plan, per pr should run at a time
concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.number }}-${{ github.head_ref || github.ref }}'

env:
  GUARDIAN_VERSION: '1.0.0'
  GUARDIAN_WIF_PROVIDER: 'my-guardian-wif-provider'
  GUARDIAN_WIF_SERVICE_ACCOUNT: 'my-guardian-service-account@abcxyz-my-project.iam.gserviceaccount.com'
  GUARDIAN_BUCKET_NAME: 'my-guardian-state-bucket'
  GUARDIAN_TERRAFORM_VERSION: '1.7.4'
  TAGREP_VERSION: '0.0.7'

jobs:
  init:
    # We do not run any plan jobs in the merge queue. But these jobs are still
    # required to run (in a skipped state) in order to block adding to the
    # merge queue until a plan has been created.
    if: |
      github.event_name == 'pull_request_target'
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      pull-requests: 'write'

    outputs:
      directories: '${{ steps.dirs.outputs.directories }}'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0 # get everything so we can use git diff
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: 'Setup Guardian'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Setup Tagrep'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/tagrep/releases/download/v${{ env.TAGREP_VERSION }}/tagrep_${{ env.TAGREP_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.tagrep'
          binary_subpath: 'tagrep'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_tagrep_${{ env.TAGREP_VERSION }}'
          add_to_path: true

      - name: 'Guardian Remove Previous Plan Comments'
        shell: 'bash'
        env:
          # used to delete old comments on pull requests (access to only this repo)
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
        run: |-
          guardian workflows remove-guardian-comments

      - name: 'Tagrep PR vars'
        id: 'tagrep'
        shell: 'bash'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          TAGREP_LOG_TARGET: 'STDERR'
        run: |
          tags="$(tagrep parse -type=request -format=raw -array-tags=GUARDIAN_DIRS 2> tagrep.log)"
          cat tagrep.log
          echo "tags -> ${tags}"
          echo "${tags}" >> "${GITHUB_ENV}"

      - name: 'Guardian Directories'
        id: 'dirs'
        shell: 'bash'
        env:
          # used to create comments on pull requests (access to only this repo)
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
          BASE_REF: '${{ github.event.pull_request.base.sha }}'
          PR_REF: '${{ github.event.pull_request.head.sha }}'
        run: |-
          # The BASE_REF on github is sometimes only in the main branch.
          # We can use git merge-base to find the intersection between the
          # main branch and PR (feature) branch.
          FEATURE_BRANCH_BASE_REF="$(git merge-base "${PR_REF}" "${BASE_REF}")"
          DIRECTORIES=$(guardian entrypoints -dir="." -detect-changes -source-ref="${FEATURE_BRANCH_BASE_REF}" -dest-ref="${PR_REF}")
          echo "entrypoints -> ${DIRECTORIES}"
          echo "directories=${DIRECTORIES}" >> "${GITHUB_OUTPUT}"

  plan:
    if: |
      github.event_name == 'pull_request_target' && needs.init.outputs.directories != '[]'
    needs:
      - 'init'
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'

    strategy:
      fail-fast: false
      max-parallel: 100
      matrix:
        working_directory: '${{ fromJSON(needs.init.outputs.directories) }}'

    env:
      DIRECTORY: '${{ matrix.working_directory }}'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.GUARDIAN_WIF_PROVIDER }}'
          service_account: '${{ env.GUARDIAN_WIF_SERVICE_ACCOUNT }}'

      - name: 'Setup Terraform'
        uses: 'abcxyz/secure-setup-terraform@cedf5136321da85745811c74c063c19675bfa904' # ratchet:abcxyz/secure-setup-terraform@main
        with:
          terraform_version: '${{ env.GUARDIAN_TERRAFORM_VERSION }}'
          terraform_module_location: './${{ matrix.working_directory }}'
          terraform_lockfile_location: './${{ matrix.working_directory }}'
          protect_lockfile: true
          terraform_wrapper: false

      - name: 'Setup Guardian'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Guardian Plan'
        shell: 'bash'
        env:
          # used to create comments on pull requests (access to only this repo)
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
        run: |-
          guardian plan -dir="${DIRECTORY}" -storage="gcs://${GUARDIAN_BUCKET_NAME}"

  plan_success:
    if: |
      always() && github.event_name == 'pull_request_target'
    runs-on: 'ubuntu-latest'
    needs:
      - 'init'
      - 'plan'

    permissions:
      pull-requests: 'write'

    steps:
      - name: 'Setup Guardian'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Guardian Post Plan Status'
        shell: 'bash'
        env:
          # used to create comments on pull requests (access to only this repo)
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
        run: |-
          guardian workflows plan-status-comment \
          -init-result="${{ needs.init.result }}" \
          -plan-result="${{ needs.plan.result }}"
