# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Guardian run is used to run Terraform commands that are most often used
# to fix state after a failed workflow or get outputs for a given module
# directory. Any user with write permissions on the repo can run this workflow.
name: 'guardian_run'
run-name: 'guardian_run - [${{ inputs.command }}] [${{ inputs.entrypoint }}]'

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'COMMAND - The Terraform command to run.'
        required: true
        type: 'choice'
        default: 'plan'
        options:
          - 'plan'
          - 'apply'
          - 'output'
      entrypoint:
        description: 'ENTRYPOINT - The directory to search for all child directories containing Terraform configurations. If left blank, the Terraform command will run for all configured directories.'
        default: '.'
        type: 'string'
      detailed-exitcode:
        description: 'DETAILED-EXITCODE (usually false) - The value of the -detailed-exitcode flag for "terraform plan", which causes a nonempty diff to return a status code of 2; ignored for other commands besides "plan".'
        type: 'boolean'
        default: false
        required: false
  workflow_call:
    inputs:
      command:
        description: 'COMMAND - The Terraform command to run.'
        required: false
        type: 'string'
        default: 'plan'
      entrypoint:
        description: 'ENTRYPOINT - The directory to search for all child directories containing Terraform configurations. If left blank, the Terraform command will run for all configured directories.'
        default: '.'
        type: 'string'
      detailed-exitcode:
        description: 'DETAILED-EXITCODE (usually false) - The value of the -detailed-exitcode flag for "terraform plan", which causes a nonempty diff to return a status code of 2; ignored for other commands besides "plan".'
        type: 'boolean'
        default: false
        required: false

# only one fix should run at a time
concurrency:
  group: '${{ github.workflow }}'

env:
  GUARDIAN_VERSION: '1.0.0'
  GUARDIAN_WIF_PROVIDER: 'my-guardian-wif-provider'
  GUARDIAN_WIF_SERVICE_ACCOUNT: 'my-guardian-service-account@abcxyz-my-project.iam.gserviceaccount.com'
  GUARDIAN_TERRAFORM_VERSION: '1.7.4'

jobs:
  init:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'

    outputs:
      directories: '${{ steps.dirs.outputs.directories }}'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Setup Guardian'
        uses: 'abcxyz/actions/.github/actions/setup-binary@4354d52e96a232b28734c3a0cc39266ecc3d52e8' # ratchet:abcxyz/actions/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Guardian Directories'
        id: 'dirs'
        shell: 'bash'
        env:
          ENTRYPOINT: '${{ inputs.entrypoint }}'
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
        run: |-
          DIRECTORIES=$(guardian entrypoints -dir="${ENTRYPOINT}" -skip-reporting)
          echo "entrypoints -> ${DIRECTORIES}"
          echo "directories=${DIRECTORIES}" >> "${GITHUB_OUTPUT}"

  run:
    if: |
      needs.init.outputs.directories != '[]'
    needs:
      - 'init'
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      fail-fast: false
      max-parallel: 100
      matrix:
        working_directory: '${{ fromJSON(needs.init.outputs.directories) }}'

    env:
      DIRECTORY: '${{ matrix.working_directory }}'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.GUARDIAN_WIF_PROVIDER}}'
          service_account: '${{ env.GUARDIAN_WIF_SERVICE_ACCOUNT }}'

      - name: 'Setup Terraform'
        uses: 'abcxyz/secure-setup-terraform@07e27af2369be8a26b858cdc2ab16c432c4b23ed' # ratchet:abcxyz/secure-setup-terraform@main
        with:
          terraform_version: '${{ env.GUARDIAN_TERRAFORM_VERSION }}'
          terraform_module_location: './${{ matrix.working_directory }}'
          terraform_lockfile_location: './${{ matrix.working_directory }}'
          protect_lockfile: true
          terraform_wrapper: false

      - name: 'Setup Guardian'
        uses: 'abcxyz/actions/.github/actions/setup-binary@4354d52e96a232b28734c3a0cc39266ecc3d52e8' # ratchet:abcxyz/actions/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Guardian Output'
        if: |
          inputs.command == 'output'
        shell: 'bash'
        run: |-
          guardian run -dir="${DIRECTORY}" -- output

      - name: 'Guardian Plan'
        if: |
          inputs.command == 'plan'
        env:
          DETAILED_EXITCODE: '${{ inputs.detailed-exitcode }}'
        shell: 'bash'
        run: |-
          guardian run -dir="${DIRECTORY}" -- plan -input=false -detailed-exitcode="${DETAILED_EXITCODE}"

      - name: 'Guardian Apply'
        if: |
          inputs.command == 'apply'
        shell: 'bash'
        run: |-
          guardian run -dir="${DIRECTORY}" -- apply -input=false -auto-approve
