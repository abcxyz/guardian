# Copyright 2025 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Guardian merge check is used to determine if a PR conflicts with another recent PR
# directories after a pull request has been created.
#
# NOTE: That this workflow is included by default but only is enabled if you
# also enable the merge queue in your ruleset. For more details, see:
# https://github.com/abcxyz/guardian?tab=readme-ov-file#merge-check
name: 'guardian_merge_check'
run-name: 'guardian_merge_check - [Merge Queue Ref=${{ github.ref }}]'

on:
  # This workflow must run in the pull_request in order to be a required status
  # check and successfully block merges in the merge queue. Note that it will
  # always have a `skipped` status in the pull request and will only ever
  # execute the job in the merge queue (when and if the merge queue is enabled).
  pull_request:
  merge_group:

# only one check per ref at a time.
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'

env:
  GUARDIAN_VERSION: '1.0.0'
  GUARDIAN_TERRAFORM_VERSION: '1.7.4'
  TAGREP_VERSION: '0.0.7'

jobs:
  merge_check:
    # Only runs in the merge queue. Shows a `skipped` status on the
    # `pull_request`.
    if: |
      github.event_name == 'merge_group'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      pull-requests: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0 # get everything so we can use git diff
          ref: '${{ github.event.merge_group.head_sha }}'

      - name: 'Setup Guardian'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/guardian/releases/download/v${{ env.GUARDIAN_VERSION }}/guardian_${{ env.GUARDIAN_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.guardian'
          binary_subpath: 'guardian'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_guardian_${{ env.GUARDIAN_VERSION }}'
          add_to_path: true

      - name: 'Setup Tagrep'
        uses: 'abcxyz/pkg/.github/actions/setup-binary@90acbb7e25e72c3c7ae2c040244d8468f74f8d96' # ratchet:abcxyz/pkg/.github/actions/setup-binary@main
        with:
          download_url: 'https://github.com/abcxyz/tagrep/releases/download/v${{ env.TAGREP_VERSION }}/tagrep_${{ env.TAGREP_VERSION }}_linux_amd64.tar.gz'
          install_path: '${{ runner.temp }}/.tagrep'
          binary_subpath: 'tagrep'
          cache_key: '${{ runner.os }}_${{ runner.arch }}_tagrep_${{ env.TAGREP_VERSION }}'
          add_to_path: true

      - name: 'Tagrep PR vars'
        id: 'tagrep'
        shell: 'bash'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          TAGREP_LOG_TARGET: 'STDERR'
        run: |
          tags="$(tagrep parse -type=request -format=raw -array-tags=GUARDIAN_DIRS 2> tagrep.log)"
          cat tagrep.log
          echo "tags -> $tags"
          echo "$tags" >> "$GITHUB_ENV"

      - name: 'Guardian Changed Entrypoints in Current PR'
        id: 'entrypoints-changed-in-pr'
        shell: 'bash'
        env:
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
          SOURCE_REF: '${{ github.event.merge_group.base_sha }}'
          DEST_REF: '${{ github.event.merge_group.head_sha }}'
          EVENT: '${{ github.event_name }}'
        run: |-
          DIRECTORIES=$(guardian entrypoints -skip-reporting -dir="." -detect-changes -source-ref="${SOURCE_REF}" -dest-ref="${DEST_REF}")
          echo "entrypoints -> ${DIRECTORIES}"
          echo "directories=${DIRECTORIES}" >> $GITHUB_OUTPUT

      - name: 'PR info'
        id: 'pr-info'
        shell: 'bash'
        env:
          GH_TOKEN: '${{ github.token }}'
        run: |-
          PR_NUM="$(echo "$GITHUB_REF" | grep -Po 'refs\/heads\/gh-readonly-queue\/(?:.+)\/pr-\K(\d*)')"
          PR_TARGET_BRANCH_NAME="$(echo "$GITHUB_REF" | grep -Po 'refs\/heads\/gh-readonly-queue\/\K((?!\/pr-)(.))+')"
          PR_BRANCH_REF="$(gh pr --repo="$GITHUB_REPOSITORY" view "$PR_NUM" --json headRefOid --jq '.headRefOid')"
          echo "pr_branch_ref=${PR_BRANCH_REF}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUM}" >> $GITHUB_OUTPUT
          echo "pr_target_branch_name=${PR_TARGET_BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: 'Checkout'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0 # get everything so we can use git diff
          ref: '${{ steps.pr-info.outputs.pr_branch_ref }}'

      # This checks all commits that are in the merge queue git log that are
      # NOT in the PR feature branch. This means that this checks commits that
      # are both in the merge queue and that have been merged to main (but are
      # not rebased in the feature branch).
      - name: 'Guardian Changed Entrypoints since PR'
        id: 'entrypoints-changed-since-pr'
        shell: 'bash'
        env:
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
          BASE_REF: '${{ github.event.merge_group.base_sha }}'
          PR_REF: '${{ steps.pr-info.outputs.pr_branch_ref }}'
          EVENT: '${{ github.event_name }}'
          GUARDIAN_DIRS: '' # Explicitly reset
        run: |-
          # We want to know the intersection between the merge queue base ref
          # and the PR base ref. This will be the commit on main at the time
          # of the PR plan.
          FEATURE_BRANCH_BASE_REF=$(git merge-base $PR_REF $BASE_REF)
          DIRECTORIES=$(guardian entrypoints -skip-reporting -dir="." -detect-changes -source-ref="${FEATURE_BRANCH_BASE_REF}" -dest-ref="${BASE_REF}")
          echo "entrypoints -> ${DIRECTORIES}"
          echo "directories=${DIRECTORIES}" >> $GITHUB_OUTPUT

      - name: 'Check'
        id: 'check'
        shell: 'bash'
        env:
          CHANGED_IN_PR: '${{ steps.entrypoints-changed-in-pr.outputs.directories }}'
          CHANGED_SINCE_PR: '${{ steps.entrypoints-changed-since-pr.outputs.directories }}'
        run: |-
          modified_in_both="$(join <(echo "$CHANGED_IN_PR" | jq '.[]') <(echo "$CHANGED_SINCE_PR" | jq '.[]'))"
          if [[ "$modified_in_both" != "" ]]; then
            echo "[ERROR] Found entrypoints that have been modified since the plan was created. Please rebase and recreate your plan."
            echo "$modified_in_both"
            exit 1
          fi

      - name: 'Comment Status'
        if: |
          always()
        shell: 'bash'
        env:
          RESULT: '${{ steps.check.outcome }}'
          TARGET_BRANCH: '${{ steps.pr-info.outputs.pr_target_branch_name }}'
          GUARDIAN_GITHUB_TOKEN: '${{ github.token }}'
          PR_NUMBER: '${{ steps.pr-info.outputs.pr_number }}'
        run: |-
          guardian workflows merge-queue-comment -result="$RESULT" -target-branch="$TARGET_BRANCH" -github-pull-request-number="$PR_NUMBER"
